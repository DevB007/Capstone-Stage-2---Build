commit 4dd6655475d3af759280114c00c4e9e2cfa6893f
Author: Deepankar <deepankar@vitamap.com>
Date:   Thu Apr 27 14:32:52 2017 +0530

    * Impld content provider.
    
    * Impld loader.
    
    * Fixed alarm accuracy.

diff --git a/app/build.gradle b/app/build.gradle
index ab93518..23668ec 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -44,9 +44,6 @@ dependencies {
     compile "com.google.firebase:firebase-ads:$GPLAY_VERSION"
     compile "com.google.android.gms:play-services-places:$GPLAY_VERSION"
 
-    // FirebaseUI Database only
-    compile 'com.firebaseui:firebase-ui-database:1.2.0'
-
     // FirebaseUI Auth only
     compile 'com.firebaseui:firebase-ui-auth:1.2.0'
 
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index 9b9c97a..d364fcd 100644
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -7,7 +7,6 @@
     <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/>
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
 
-
     <application
         android:name=".IMaliveApplication"
         android:allowBackup="true"
@@ -57,6 +56,11 @@
                 android:resource="@xml/appwidget_info"/>
         </receiver>
 
+        <provider
+            android:name=".RemindersProvider"
+            android:authorities="com.deveshwar.imalive" />
+
+
         <meta-data
             android:name="com.google.android.geo.API_KEY"
             android:value="AIzaSyARIT6jiXazTfKISsYChgoVEedWn-EgpLI"/>
diff --git a/app/src/main/java/com/example/deveshwar/imalive/AlarmReceiver.java b/app/src/main/java/com/example/deveshwar/imalive/AlarmReceiver.java
index 74e1bf1..3a2d55c 100644
--- a/app/src/main/java/com/example/deveshwar/imalive/AlarmReceiver.java
+++ b/app/src/main/java/com/example/deveshwar/imalive/AlarmReceiver.java
@@ -3,13 +3,13 @@ package com.example.deveshwar.imalive;
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
+import android.database.Cursor;
 
 import org.json.JSONException;
 import org.json.JSONObject;
 
 import java.util.ArrayList;
 import java.util.Calendar;
-import java.util.List;
 
 public class AlarmReceiver extends BroadcastReceiver {
 
@@ -17,9 +17,12 @@ public class AlarmReceiver extends BroadcastReceiver {
 
     @Override
     public void onReceive(Context context, Intent intent) {
-        // TODO read reminders from db
-        List<Reminder> reminders = new ArrayList<>();
-        Reminder reminder;
+
+        final Cursor data = context.getContentResolver().query(
+                RemindersContract.buildGetAllRemindersUri(), null, null, null, null);
+
+        if (data == null) return;
+
         String deliveryTime[];
         JSONObject deliveryDays;
 
@@ -28,9 +31,12 @@ public class AlarmReceiver extends BroadcastReceiver {
         int minute = calendar.get(Calendar.MINUTE);
         int day = calendar.get(Calendar.DAY_OF_WEEK);
 
-        for (int i = 0; i < reminders.size(); i++) {
-            reminder = reminders.get(i);
+        data.moveToFirst();
+        while (!data.isAfterLast()) {
+
+            Reminder reminder = Reminder.from(data);
             deliveryTime = reminder.getDeliveryTime().split(":");
+
             try {
                 deliveryDays = new JSONObject(reminder.getDeliveryDays());
                 reminderDeliveryDays.clear();
@@ -67,6 +73,7 @@ public class AlarmReceiver extends BroadcastReceiver {
                 e.printStackTrace();
             }
 
+            data.moveToNext();
         }
 
     }
diff --git a/app/src/main/java/com/example/deveshwar/imalive/BootReceiver.java b/app/src/main/java/com/example/deveshwar/imalive/BootReceiver.java
index 4432287..5b6f578 100644
--- a/app/src/main/java/com/example/deveshwar/imalive/BootReceiver.java
+++ b/app/src/main/java/com/example/deveshwar/imalive/BootReceiver.java
@@ -3,9 +3,7 @@ package com.example.deveshwar.imalive;
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
-
-import java.util.ArrayList;
-import java.util.List;
+import android.database.Cursor;
 
 
 public class BootReceiver extends BroadcastReceiver {
@@ -13,17 +11,16 @@ public class BootReceiver extends BroadcastReceiver {
 
     public void onReceive(Context context, Intent intent) {
         if (intent.getAction().equals(Intent.ACTION_BOOT_COMPLETED)) {
-            // TODO read reminders from db
-            List<Reminder> reminders = new ArrayList<>();
-            Reminder reminder;
-            String deliveryTime[];
-
-            for (int i = 0; i < reminders.size(); i++) {
-                reminder = reminders.get(i);
-                deliveryTime = reminder.getDeliveryTime().split(":");
+            final Cursor data = context.getContentResolver().query(
+                    RemindersContract.buildGetAllRemindersUri(), null, null, null, null);
+            data.moveToFirst();
+            while (!data.isAfterLast()) {
+                Reminder reminder = Reminder.from(data);
+                String[] deliveryTime = reminder.getDeliveryTime().split(":");
                 int hour = Integer.parseInt(deliveryTime[0]);
                 int minute = Integer.parseInt(deliveryTime[1]);
                 Util.setAlarm(context, hour, minute);
+                data.moveToNext();
             }
         }
     }
diff --git a/app/src/main/java/com/example/deveshwar/imalive/IMaliveRemoteViewsFactory.java b/app/src/main/java/com/example/deveshwar/imalive/IMaliveRemoteViewsFactory.java
index 868abb0..6cb8867 100644
--- a/app/src/main/java/com/example/deveshwar/imalive/IMaliveRemoteViewsFactory.java
+++ b/app/src/main/java/com/example/deveshwar/imalive/IMaliveRemoteViewsFactory.java
@@ -3,6 +3,7 @@ package com.example.deveshwar.imalive;
 import android.appwidget.AppWidgetManager;
 import android.content.Context;
 import android.content.Intent;
+import android.database.Cursor;
 import android.net.Uri;
 import android.os.Bundle;
 import android.widget.RemoteViews;
@@ -109,7 +110,15 @@ public class IMaliveRemoteViewsFactory implements RemoteViewsService.RemoteViews
 
     private void initReminders() {
         mReminders = new ArrayList<>();
-        //TODO read from db
+        final Cursor data = mContext.getContentResolver().query(
+                RemindersContract.buildGetAllRemindersUri(), null, null, null, null);
+        data.moveToFirst();
+        while (!data.isAfterLast()) {
+            Reminder reminder = Reminder.from(data);
+            mReminders.add(reminder);
+            data.moveToNext();
+        }
+
     }
 
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/example/deveshwar/imalive/MainActivity.java b/app/src/main/java/com/example/deveshwar/imalive/MainActivity.java
index ad329f0..e6debe1 100644
--- a/app/src/main/java/com/example/deveshwar/imalive/MainActivity.java
+++ b/app/src/main/java/com/example/deveshwar/imalive/MainActivity.java
@@ -1,7 +1,10 @@
 package com.example.deveshwar.imalive;
 
+import android.app.LoaderManager;
 import android.content.Context;
+import android.content.CursorLoader;
 import android.content.Intent;
+import android.content.Loader;
 import android.database.Cursor;
 import android.net.Uri;
 import android.os.Bundle;
@@ -23,9 +26,11 @@ import java.util.List;
 import butterknife.BindView;
 import butterknife.ButterKnife;
 
-public class MainActivity extends AppCompatActivity {
+public class MainActivity extends AppCompatActivity
+        implements LoaderManager.LoaderCallbacks<Cursor> {
 
     private static final int PICK_CONTACT_REQUEST_CODE = 0;
+    public static final int REMINDER_LOADER_ID = R.id.loader_reminder;
 
     private RemindersAdapter adapter;
     private List<Reminder> reminders;
@@ -53,7 +58,6 @@ public class MainActivity extends AppCompatActivity {
 
         setSupportActionBar(toolbar);
 
-        // TODO read reminders from db async
         reminders = new ArrayList<>();
         handleEmptyState();
 
@@ -106,12 +110,7 @@ public class MainActivity extends AppCompatActivity {
     @Override
     protected void onResume() {
         super.onResume();
-        if (adapter != null) {
-            //reminders = realm.where(Reminder.class).findAll();
-            // TODO re-read reminders from db
-            adapter.notifyDataSetChanged();
-            handleEmptyState();
-        }
+        getLoaderManager().initLoader(REMINDER_LOADER_ID, null, this);
     }
 
     private void handleEmptyState() {
@@ -127,6 +126,33 @@ public class MainActivity extends AppCompatActivity {
         in.setClass(context, MainActivity.class);
         return in;
     }
+
+    @Override
+    public Loader<Cursor> onCreateLoader(int id, Bundle args) {
+        if (id == REMINDER_LOADER_ID) {
+            return new CursorLoader(this, RemindersContract.buildGetAllRemindersUri(),
+                    null, null, null, null);
+        } else {
+            return null;
+        }
+    }
+
+    @Override
+    public void onLoadFinished(Loader<Cursor> loader, Cursor data) {
+        if (loader.getId() == REMINDER_LOADER_ID) {
+            adapter.reload(data);
+            handleEmptyState();
+        }
+    }
+
+    @Override
+    public void onLoaderReset(Loader<Cursor> loader) {
+        if (loader.getId() == REMINDER_LOADER_ID) {
+            rvReminders.setAdapter(null);
+            adapter = null;
+            handleEmptyState();
+        }
+    }
 }
 
 
diff --git a/app/src/main/java/com/example/deveshwar/imalive/MessageComposerActivity.java b/app/src/main/java/com/example/deveshwar/imalive/MessageComposerActivity.java
index e4e40d7..6cf9593 100644
--- a/app/src/main/java/com/example/deveshwar/imalive/MessageComposerActivity.java
+++ b/app/src/main/java/com/example/deveshwar/imalive/MessageComposerActivity.java
@@ -6,6 +6,7 @@ import android.app.ProgressDialog;
 import android.content.Context;
 import android.content.Intent;
 import android.content.pm.PackageManager;
+import android.database.Cursor;
 import android.net.Uri;
 import android.os.AsyncTask;
 import android.os.Bundle;
@@ -83,9 +84,11 @@ public class MessageComposerActivity extends AppCompatActivity implements Google
 
         intentExtras = getIntent().getExtras();
 
-        // TODO get reminder by id
-        //reminder = realm.where(Reminder.class).equalTo("id", intentExtras.getInt("reminderId",
-        // -1)).findFirst();
+        final Cursor cur = getContentResolver().query(
+                RemindersContract.buildReminderUri(
+                        intentExtras.getInt("reminderId", -1)), null, null, null, null);
+        cur.moveToFirst();
+        reminder = Reminder.from(cur);
 
         String contactPhoto = reminder.getContactPhoto();
 
diff --git a/app/src/main/java/com/example/deveshwar/imalive/Reminder.java b/app/src/main/java/com/example/deveshwar/imalive/Reminder.java
index 054fb27..8b2b66e 100644
--- a/app/src/main/java/com/example/deveshwar/imalive/Reminder.java
+++ b/app/src/main/java/com/example/deveshwar/imalive/Reminder.java
@@ -1,5 +1,8 @@
 package com.example.deveshwar.imalive;
 
+import android.content.ContentValues;
+import android.database.Cursor;
+
 public class Reminder {
 
     public int id;
@@ -65,4 +68,29 @@ public class Reminder {
     public void setDeliveryDays(String deliveryDays) {
         this.deliveryDays = deliveryDays;
     }
-}
+
+    public static Reminder from(Cursor cursor) {
+        Reminder reminder = new Reminder();
+        reminder.setId(cursor.getInt(RemindersProvider.COLUMN_IDX_ID));
+        reminder.setContactName(cursor.getString(RemindersProvider.COLUMN_IDX_CONTACT_NAME));
+        reminder.setContactNumber(cursor.getString(RemindersProvider.COLUMN_IDX_CONTACT_NUMBER));
+        reminder.setContactPhoto(cursor.getString(RemindersProvider.COLUMN_IDX_CONTACT_PHOTO));
+        reminder.setText(cursor.getString(RemindersProvider.COLUMN_IDX_TEXT));
+        reminder.setDeliveryDays(cursor.getString(RemindersProvider.COLUMN_IDX_DELIVERY_DAYS));
+        reminder.setDeliveryTime(cursor.getString(RemindersProvider.COLUMN_IDX_DELIVERY_TIME));
+        return reminder;
+    }
+
+    public ContentValues toContentValues() {
+        ContentValues v = new ContentValues();
+        // Skip id
+        //v.put(RemindersContract.ReminderEntry._ID, getId());
+        v.put(RemindersContract.ReminderEntry.COL_CONTACT_NAME, getContactName());
+        v.put(RemindersContract.ReminderEntry.COL_CONTACT_NUMBER, getContactNumber());
+        v.put(RemindersContract.ReminderEntry.COL_CONTACT_PHOTO, getContactPhoto());
+        v.put(RemindersContract.ReminderEntry.COL_TEXT, getText());
+        v.put(RemindersContract.ReminderEntry.COL_DELIVERY_DAYS, getDeliveryDays());
+        v.put(RemindersContract.ReminderEntry.COL_DELIVERY_TIME, getDeliveryTime());
+        return v;
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/example/deveshwar/imalive/ReminderComposerActivity.java b/app/src/main/java/com/example/deveshwar/imalive/ReminderComposerActivity.java
index 98b5d94..0eb4f3b 100644
--- a/app/src/main/java/com/example/deveshwar/imalive/ReminderComposerActivity.java
+++ b/app/src/main/java/com/example/deveshwar/imalive/ReminderComposerActivity.java
@@ -1,6 +1,7 @@
 package com.example.deveshwar.imalive;
 
 import android.content.Intent;
+import android.database.Cursor;
 import android.graphics.Typeface;
 import android.net.Uri;
 import android.os.Bundle;
@@ -86,14 +87,20 @@ public class ReminderComposerActivity extends AppCompatActivity implements TimeP
 
         if (intentExtras.hasExtra("reminderId")) {
             isEditing = true;
-            //reminder = realm.where(Reminder.class).equalTo("id", intentExtras.getIntExtra
-            // ("reminderId", -1)).findFirst();
+            final Cursor cur = getContentResolver().query(
+                    RemindersContract.buildReminderUri(
+                            intentExtras.getIntExtra("reminderId", -1)), null, null, null, null);
+            cur.moveToFirst();
+            reminder = Reminder.from(cur);
+            cur.close();
             if (reminder != null) {
                 reminderDeleteButton.setVisibility(View.VISIBLE);
                 reminderDeleteButton.setOnClickListener(new View.OnClickListener() {
                     @Override
                     public void onClick(View v) {
-                        // TODO delete reminder from db
+                        getContentResolver().delete(
+                                RemindersContract.buildReminderUri(
+                                        intentExtras.getIntExtra("reminderId", -1)), null, null);
                         finish();
                     }
                 });
@@ -147,31 +154,34 @@ public class ReminderComposerActivity extends AppCompatActivity implements TimeP
         saveReminderFAB.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
-                if (isMessageCompositionValid()) {
-                    if (!isEditing) {
-                        reminder = new Reminder();
-                        //realm.where(Reminder.class).findAll().max("id");
-                        // TODO read last object to get next insert key
-                        Number lastIndex = 0;
-                        if (lastIndex == null) {
-                            lastIndex = 0;
-                        }
-                        reminder.setId(lastIndex.intValue() + 1);
-                        reminder.setContactName(contactName);
-                        reminder.setContactNumber(contactNumber);
-                        reminder.setContactPhoto(contactPhoto);
-                    }
-                    reminder.setText(reminderMessage.getText().toString());
-                    reminder.setDeliveryTime(reminderDeliveryTime);
-                    reminder.setDeliveryDays(getReminderDeliveryDays());
-                    // TODO write db object update code
-
-                    String deliveryTime[] = reminder.getDeliveryTime().split(":");
-                    int hour = Integer.parseInt(deliveryTime[0]);
-                    int minute = Integer.parseInt(deliveryTime[1]);
-                    Util.setAlarm(ReminderComposerActivity.this, hour, minute);
-                    finish();
+                if (!isMessageCompositionValid()) {
+                    return;
+                }
+
+                if (!isEditing) {
+                    reminder = new Reminder();
+                    reminder.setContactName(contactName);
+                    reminder.setContactNumber(contactNumber);
+                    reminder.setContactPhoto(contactPhoto);
                 }
+
+                reminder.setText(reminderMessage.getText().toString());
+                reminder.setDeliveryTime(reminderDeliveryTime);
+                reminder.setDeliveryDays(getReminderDeliveryDays());
+
+                if (!isEditing) {
+                    // insert
+                    getContentResolver().insert(RemindersContract.ReminderEntry.CONTENT_URI, reminder.toContentValues());
+                } else {
+                    getContentResolver().update(RemindersContract.buildReminderUri(reminder.getId()), reminder.toContentValues(), null, null);
+                    // update
+                }
+
+                String deliveryTime[] = reminder.getDeliveryTime().split(":");
+                int hour = Integer.parseInt(deliveryTime[0]);
+                int minute = Integer.parseInt(deliveryTime[1]);
+                Util.setAlarm(ReminderComposerActivity.this, hour, minute);
+                finish();
             }
         });
 
diff --git a/app/src/main/java/com/example/deveshwar/imalive/ReminderDbHelper.java b/app/src/main/java/com/example/deveshwar/imalive/ReminderDbHelper.java
new file mode 100644
index 0000000..37b41b6
--- /dev/null
+++ b/app/src/main/java/com/example/deveshwar/imalive/ReminderDbHelper.java
@@ -0,0 +1,50 @@
+package com.example.deveshwar.imalive;
+
+import android.content.Context;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+
+import com.example.deveshwar.imalive.RemindersContract.ReminderEntry;
+
+/**
+ * @Author deepankar
+ * @date 27/4/17.
+ */
+
+public class ReminderDbHelper extends SQLiteOpenHelper {
+
+    private static final String CREATE_REMINDERS_TABLE = "CREATE TABLE IF NOT EXISTS "
+            + ReminderEntry.TABLE_NAME + "("
+            + ReminderEntry._ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
+            + ReminderEntry.COL_CONTACT_NAME + " TEXT NOT NULL,"
+            + ReminderEntry.COL_CONTACT_NUMBER + " TEXT NOT NULL,"
+            + ReminderEntry.COL_CONTACT_PHOTO + " TEXT NOT NULL,"
+            + ReminderEntry.COL_TEXT + " TEXT NOT NULL,"
+            + ReminderEntry.COL_DELIVERY_DAYS + " TEXT NOT NULL,"
+            + ReminderEntry.COL_DELIVERY_TIME + " TEXT NOT NULL"
+            + ")";
+
+    private static final String DB_NAME = "reminders.db";
+    private static final int DB_VERSION = 1;
+
+    public ReminderDbHelper(Context context, String name,
+                            SQLiteDatabase.CursorFactory factory, int version) {
+        super(context, name, factory, version);
+    }
+
+    public ReminderDbHelper(Context context) {
+        super(context, DB_NAME, null, DB_VERSION);
+    }
+
+    @Override
+    public void onCreate(SQLiteDatabase db) {
+        db.execSQL(CREATE_REMINDERS_TABLE);
+    }
+
+    @Override
+    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+
+    }
+
+
+}
diff --git a/app/src/main/java/com/example/deveshwar/imalive/RemindersAdapter.java b/app/src/main/java/com/example/deveshwar/imalive/RemindersAdapter.java
index 4ef9517..503be95 100644
--- a/app/src/main/java/com/example/deveshwar/imalive/RemindersAdapter.java
+++ b/app/src/main/java/com/example/deveshwar/imalive/RemindersAdapter.java
@@ -2,6 +2,7 @@ package com.example.deveshwar.imalive;
 
 import android.content.Context;
 import android.content.Intent;
+import android.database.Cursor;
 import android.net.Uri;
 import android.support.v7.widget.RecyclerView;
 import android.view.LayoutInflater;
@@ -20,20 +21,31 @@ import java.util.Locale;
 
 public class RemindersAdapter extends RecyclerView.Adapter<RemindersAdapter.ViewHolder> {
 
-    private List<Reminder> mReminders;
+    private final List<Reminder> mReminders;
 
     public RemindersAdapter(List<Reminder> reminders) {
         mReminders = reminders;
     }
 
+    public void reload(Cursor data) {
+        mReminders.clear();
+        data.moveToFirst();
+        while (!data.isAfterLast()) {
+            Reminder reminder = Reminder.from(data);
+            mReminders.add(reminder);
+            data.moveToNext();
+        }
+        notifyDataSetChanged();
+    }
+
     public static class ViewHolder extends RecyclerView.ViewHolder {
+
         public Context context;
         public TextView contactName;
         public ImageView contactPhoto;
         public TextView reminderText;
         public TextView reminderDeliveryTime;
         public TextView reminderDeliveryDays;
-
         public ViewHolder(Context context, View itemView) {
             super(itemView);
             this.context = context;
@@ -115,4 +127,8 @@ public class RemindersAdapter extends RecyclerView.Adapter<RemindersAdapter.View
         intent.putExtra("reminderId", reminder.getId());
         viewHolder.context.startActivity(intent);
     }
+
+    public List<Reminder> getReminders() {
+        return mReminders;
+    }
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/example/deveshwar/imalive/RemindersContract.java b/app/src/main/java/com/example/deveshwar/imalive/RemindersContract.java
new file mode 100644
index 0000000..7aadef0
--- /dev/null
+++ b/app/src/main/java/com/example/deveshwar/imalive/RemindersContract.java
@@ -0,0 +1,60 @@
+package com.example.deveshwar.imalive;
+
+import android.content.ContentResolver;
+import android.content.ContentUris;
+import android.net.Uri;
+import android.provider.BaseColumns;
+
+/**
+ * @Author deepankar
+ * @date 27/4/17.
+ */
+
+public class RemindersContract {
+
+    public static final String CONTENT_AUTHORITY = "com.deveshwar.imalive";
+
+    public static final Uri BASE_CONTENT_URI = Uri.parse("content://" + CONTENT_AUTHORITY);
+
+    public static final String PATH_REMINDER = "reminder";
+
+    private RemindersContract() {
+    }
+
+    static abstract class ReminderEntry implements BaseColumns {
+        public static final Uri CONTENT_URI =
+                BASE_CONTENT_URI.buildUpon().appendPath(PATH_REMINDER).build();
+        public static final String CONTENT_TYPE =
+                ContentResolver.CURSOR_DIR_BASE_TYPE + "/" + CONTENT_AUTHORITY + "/" +
+                        PATH_REMINDER;
+        public static final String CONTENT_ITEM_TYPE =
+                ContentResolver.CURSOR_ITEM_BASE_TYPE + "/" + CONTENT_AUTHORITY + "/" +
+                        PATH_REMINDER;
+
+        public static final String COL_CONTACT_NAME = "contact_name";
+        public static final String COL_CONTACT_NUMBER = "contact_number";
+        public static final String COL_CONTACT_PHOTO = "contact_photo";
+        public static final String COL_TEXT = "text";
+        public static final String COL_DELIVERY_TIME = "delivery_time";
+        public static final String COL_DELIVERY_DAYS = "delivery_days";
+        public static final String TABLE_NAME = "reminders";
+    }
+
+    public static Uri buildGetAllRemindersUri() {
+        return buildUri(ReminderEntry.CONTENT_URI, "all");
+    }
+
+    public static Uri buildReminderUri(long id) {
+        return ContentUris.withAppendedId(ReminderEntry.CONTENT_URI, id);
+    }
+
+    public static String getIdFromUri(Uri uri) {
+        return uri.getPathSegments().get(1);
+    }
+
+    private static Uri buildUri(Uri contentUri, String post) {
+        return contentUri.buildUpon()
+                .appendPath(post)
+                .build();
+    }
+}
diff --git a/app/src/main/java/com/example/deveshwar/imalive/RemindersProvider.java b/app/src/main/java/com/example/deveshwar/imalive/RemindersProvider.java
new file mode 100644
index 0000000..f49b12b
--- /dev/null
+++ b/app/src/main/java/com/example/deveshwar/imalive/RemindersProvider.java
@@ -0,0 +1,204 @@
+package com.example.deveshwar.imalive;
+
+import android.content.ContentProvider;
+import android.content.ContentValues;
+import android.content.UriMatcher;
+import android.database.Cursor;
+import android.database.SQLException;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteQueryBuilder;
+import android.net.Uri;
+import android.support.annotation.Nullable;
+import android.util.Log;
+
+import com.example.deveshwar.imalive.RemindersContract.ReminderEntry;
+
+import java.util.Arrays;
+
+/**
+ * Created by devashish.sharma on 12/27/2016.
+ */
+public class RemindersProvider extends ContentProvider {
+    private static final String LOG_TAG = RemindersProvider.class.getSimpleName();
+
+    private static final UriMatcher sUriMatcher = buildUriMatcher();
+
+    private ReminderDbHelper mDBHelper;
+
+    static final int INSERT_REMINDER = 100;
+    static final int REMINDER_WITH_ID = 101;
+    static final int ALL_REMINDERS = 102;
+
+    public static String[] sAllColumns = {
+            ReminderEntry._ID,
+            ReminderEntry.COL_CONTACT_NAME,
+            ReminderEntry.COL_CONTACT_NUMBER,
+            ReminderEntry.COL_CONTACT_PHOTO,
+            ReminderEntry.COL_TEXT,
+            ReminderEntry.COL_DELIVERY_DAYS,
+            ReminderEntry.COL_DELIVERY_TIME
+    };
+
+    public static int COLUMN_IDX_ID = 0;
+    public static int COLUMN_IDX_CONTACT_NAME = 1;
+    public static int COLUMN_IDX_CONTACT_NUMBER = 2;
+    public static int COLUMN_IDX_CONTACT_PHOTO = 3;
+    public static int COLUMN_IDX_TEXT = 4;
+    public static int COLUMN_IDX_DELIVERY_DAYS = 5;
+    public static int COLUMN_IDX_DELIVERY_TIME = 6;
+
+    private static final SQLiteQueryBuilder SQLITE_QUERY_BUILDER;
+
+    static {
+        SQLITE_QUERY_BUILDER = new SQLiteQueryBuilder();
+        SQLITE_QUERY_BUILDER.setTables(ReminderEntry.TABLE_NAME);
+    }
+
+    private static String[] getIdFromUri(Uri uri) {
+        return new String[]{RemindersContract.getIdFromUri(uri)};
+    }
+
+    private static final String S_SELECTION_ID = ReminderEntry._ID + " = ?";
+
+    private Cursor getReminders(Uri uri) {
+        return SQLITE_QUERY_BUILDER.query(mDBHelper.getReadableDatabase(),
+                sAllColumns,
+                null, null,
+                null, null, ReminderEntry._ID + " ASC");
+    }
+
+    private Cursor getReminder(Uri uri) {
+        return SQLITE_QUERY_BUILDER.query(mDBHelper.getReadableDatabase(),
+                sAllColumns,
+                ReminderEntry._ID + " = ?", getIdFromUri(uri),
+                null, null, null);
+    }
+
+    private static UriMatcher buildUriMatcher() {
+        final UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);
+        final String authority = RemindersContract.CONTENT_AUTHORITY;
+
+        uriMatcher.addURI(authority, RemindersContract.PATH_REMINDER, INSERT_REMINDER);
+        uriMatcher.addURI(authority, RemindersContract.PATH_REMINDER + "/#", REMINDER_WITH_ID);
+        uriMatcher.addURI(authority, RemindersContract.PATH_REMINDER + "/all", ALL_REMINDERS);
+
+        return uriMatcher;
+    }
+
+    @Override
+    public boolean onCreate() {
+        mDBHelper = new ReminderDbHelper(getContext());
+        return true;
+    }
+
+    @Nullable
+    @Override
+    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs,
+                        String sortOrder) {
+        Log.i(LOG_TAG, "querying: " + uri);
+
+        Cursor cursor;
+        switch (sUriMatcher.match(uri)) {
+            case REMINDER_WITH_ID:
+                cursor = getReminder(uri);
+                break;
+            case ALL_REMINDERS:
+                cursor = getReminders(uri);
+                break;
+            default:
+                throw new UnsupportedOperationException("Unknown uri: " + uri);
+        }
+        cursor.setNotificationUri(getContext().getContentResolver(), uri);
+        return cursor;
+    }
+
+    @Nullable
+    @Override
+    public String getType(Uri uri) {
+        final int match = sUriMatcher.match(uri);
+
+        switch (match) {
+            case REMINDER_WITH_ID:
+                return ReminderEntry.CONTENT_ITEM_TYPE;
+            case ALL_REMINDERS:
+                return ReminderEntry.CONTENT_TYPE;
+            default:
+                throw new UnsupportedOperationException("Unknown uri: " + uri);
+        }
+    }
+
+    @Nullable
+    @Override
+    public Uri insert(Uri uri, ContentValues values) {
+        final SQLiteDatabase db = mDBHelper.getWritableDatabase();
+        final int match = sUriMatcher.match(uri);
+        Uri returnUri;
+
+        switch (match) {
+            case INSERT_REMINDER:
+                long _id = db.insert(ReminderEntry.TABLE_NAME, null, values);
+                if (_id > 0)
+                    returnUri = RemindersContract.buildReminderUri(_id);
+                else
+                    throw new SQLException("Failed to insert row into " + uri);
+                break;
+            default:
+                throw new UnsupportedOperationException("Unknown uri: " + uri);
+        }
+
+        getContext().getContentResolver().notifyChange(ReminderEntry.CONTENT_URI, null);
+        db.close();
+        return returnUri;
+
+    }
+
+    @Override
+    public int delete(Uri uri, String selection, String[] selectionArgs) {
+        Log.d(LOG_TAG, "delete(" + uri + ", " + selection + ", " + Arrays.toString(selectionArgs));
+
+        final SQLiteDatabase db = mDBHelper.getWritableDatabase();
+        final int match = sUriMatcher.match(uri);
+        int rowsDeleted;
+
+        switch (match) {
+            case REMINDER_WITH_ID:
+                selection = ReminderEntry._ID + " = ?";
+                selectionArgs = new String[]{RemindersContract.getIdFromUri(uri)};
+                rowsDeleted = db.delete(ReminderEntry.TABLE_NAME, selection, selectionArgs);
+                break;
+            default:
+                throw new UnsupportedOperationException("Unknown uri: " + uri);
+        }
+
+        if (rowsDeleted != 0) {
+            Log.d(LOG_TAG, "notifying content resolver that " + rowsDeleted + " rows were deleted");
+            getContext().getContentResolver().notifyChange(ReminderEntry.CONTENT_URI, null);
+        }
+
+        return rowsDeleted;
+    }
+
+    @Override
+    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {
+        Log.d(LOG_TAG, "update " + uri + ", values: " + values);
+        final SQLiteDatabase db = mDBHelper.getWritableDatabase();
+        final int match = sUriMatcher.match(uri);
+        int rowsUpdated;
+
+        switch (match) {
+            case REMINDER_WITH_ID:
+                selection = ReminderEntry._ID + " = ?";
+                selectionArgs = new String[]{RemindersContract.getIdFromUri(uri)};
+                rowsUpdated = db.update(ReminderEntry.TABLE_NAME, values, selection, selectionArgs);
+                break;
+            default:
+                throw new UnsupportedOperationException("Unknown uri: " + uri);
+        }
+
+        if (rowsUpdated != 0) {
+            getContext().getContentResolver().notifyChange(ReminderEntry.CONTENT_URI, null);
+        }
+
+        return rowsUpdated;
+    }
+}
diff --git a/app/src/main/java/com/example/deveshwar/imalive/Util.java b/app/src/main/java/com/example/deveshwar/imalive/Util.java
index bdf9f85..8e76661 100644
--- a/app/src/main/java/com/example/deveshwar/imalive/Util.java
+++ b/app/src/main/java/com/example/deveshwar/imalive/Util.java
@@ -38,6 +38,8 @@ public class Util {
         calendar.setTimeInMillis(System.currentTimeMillis());
         calendar.set(Calendar.HOUR_OF_DAY, hour);
         calendar.set(Calendar.MINUTE, minute);
+        calendar.set(Calendar.SECOND, 0);
+        calendar.set(Calendar.MILLISECOND, 0);
 
         Intent intent = new Intent(context, AlarmReceiver.class);
         PendingIntent pendingIntent = PendingIntent.getBroadcast(context, 0,
@@ -67,7 +69,9 @@ public class Util {
                 .setAutoCancel(true)
                 .addAction(R.drawable.ic_textsms_black_24dp,
                         context.getString(R.string.reminder_notification_action_still_alive),
-                        pendingIntent).build();
+                        pendingIntent)
+                .setDefaults(Notification.DEFAULT_ALL)
+                .build();
 
         NotificationManager notificationManager = (NotificationManager) context
                 .getSystemService(Context.NOTIFICATION_SERVICE);
@@ -83,4 +87,4 @@ public class Util {
         SmsManager.getDefault().sendTextMessage(number, null, message, pendingIntent, null);
     }
 
-}
+}
\ No newline at end of file
diff --git a/app/src/main/res/values/ids.xml b/app/src/main/res/values/ids.xml
new file mode 100644
index 0000000..f6b60c8
--- /dev/null
+++ b/app/src/main/res/values/ids.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <item name="loader_reminder" type="id"/>
+</resources>
\ No newline at end of file
